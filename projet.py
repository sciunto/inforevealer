#!/usr/bin/python
# -*- coding: utf-8 -*-

#TODO
#verbosity
#distrib specific


import os
import time
from subprocess import PIPE,Popen


def usage():
	print("""
usage:		sys.argv[0] [options]

options:
		-h or --help: print this help
		-l or --list: print a trouble category list
		-c or --category [arg]: choose a category
		--verbose: increase verbosity
		"""
		)
		
		
def list():
	print("""
	
List:
	* disk
	* hardware
	* display
	* sound
	* bootloader
	* internet
	
Reminder: 
	sys.argv[0] -c internet
	""")


def write_header(string):
	header= '#############################################'
	header= header + '\n' + '#   ' + str(string) + '\n'
	header=header+'#############################################'
	print(header)


class Command:
	"get a command output"
	def __init__(self, com=["uname"], root=False,verb=False):
		self.command=com
		self.root=root
		self.verb=verb

	def write(self,output='output.log'):
		import os
		import subprocess
		write_header(self.command)
		if(os.getuid() == 0):
			proc = subprocess.Popen(self.command,stdout=subprocess.PIPE)
			proc.wait()
			print(proc.stdout.read())
		else:
			print("To get this, run the script as root")


class File:
	"get a file"
	def __init__(self, file="/dev/null", root=False,verb=False):
		self.file=file
		self.root=root
		self.verb=verb
	def write(self,output='output.log'):
		import os
		#import pdb; pdb.set_trace()

		write_header(self.file)
		if(os.getuid() == 0):
			if os.path.isfile(self.file):
				fhandler= open(self.file,'r')
				t = fhandler.read()
				print(t)
				fhandler.close()
			else:
				print("The file "+str(self.file)+ " does not exist!")
		else:
			print("To get this, run the script as root")



def general_info():
	import time
	import os
	import subprocess
	write_header('General information')

	time = time.gmtime()
	print("date: "+ str(time[0])+"-"+str(time[1])+"-"+str(time[2])+" "+str(time[3])+ ":"+str(time[4]))

	uname = subprocess.Popen(args=["uname","-a"],stdout=subprocess.PIPE).communicate()[0]
	print("uname: "+str(uname))



	# detect linux distribution
	if(os.path.isfile("/etc/fedora-release")):
		os='fedora'
		fhandler=open("/etc/fedora-release")
		print(fhandler.read())
		fhandler.close()
	elif(os.path.isfile("/etc/SuSe-release")):
		os='suse'
		fhandler=open("/etc/SuSe-release")
		print(fhandler.read())
		fhandler.close()
	elif(os.path.isfile("/etc/mandriva-release")):
		os='mandriva'
		fhandler=open("/etc/mandriva-release")
		print(fhandler.read())
		fhandler.close()
	elif(os.path.isfile("/etc/readhat-release")):
		os='redhat'
		fhandler=open("/etc/mandriva-release")
		print(fhandler.read())
		fhandler.close()
	elif(os.path.isfile("/etc/debian_version")):
		os='debian'
		fhandler=open("/etc/debian_version")
		print(fhandler.read())
		fhandler.close()
	else:
		os='unknown'
		print('Your distribution is unknown. Please, open a bug report with the command ls /etc.')
	return os



###########
# FILES & COMMANDS
###########
#wiki.mandriva.com/en/Docs/Hardware

disk = (Command(["df","-h"]),
		Command(["fdisk", "-l"],root=True),
		File("/etc/fstab"),
		Command(["blkid"],root=True))


hardware = (Command(["lsmod"],root=True),
	    Command(["lsusb"],root=True))

#lspci -vvv  Display  VGA
#display = (File("/etc/X11/xorg.conf")
#		)+ hardware


#lspci -vvv Audio
sound = (Command(['/sbin/chkconfig','--list', 'sound'],root=True), #configured runlevel 3 ? checkme
	 Command(['/sbin/chkconfig','--list', 'alsa'],root=True),
	 Command(['aumix', '-q']), # Volume ?
	 Command(['/sbin/fuser', '-v', '/dev/dsp']) # what is in use ?
	 )+hardware

bootloader= (File('/boot/grub/menu.lst',root=True),
		File("/etc/default/grub",root=True),
		)+ disk

#lspci
internet = (Command(["ifconfig"],root=True),
		Command(["iwconfig"],root=True))+hardware


#####################
#Main part
####################



print('''
				~~~~~~~~~~~~~~~
				Log generated by 
				  Inforevealer
				~~~~~~~~~~~~~~~
		Distributed under the GNU GPLv2 licence
		Francois Boulogne <fboulogne at april dot org>
		https://sourceforge.net/projects/inforevealer/
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		''')




#http://www.doughellmann.com/PyMOTW/getopt/
import getopt
import sys

options, remainder = getopt.gnu_getopt(sys.argv[1:], 'hlc:', ['help',
							   'list',
							   'category='
							   'verbosity'
                                                         ])
                                                         
verbosity=False

for opt, arg in options:
	if opt in ('-h', '--help'):
		usage()
		sys.exit()
	elif opt in ('-l', '--list'):
		list_args()
		sys.exit()
	elif opt in ('-c', '--category'):	
		category=arg
	elif opt in ('--verbosity'):
		verbosity=True

#if category in category_list:
#	globals()[]


#might be nicer
if category=='disk':
	os=general_info()
	for i in disk:
		if verbosity: #user asks verb; print all
			i.write(output='toto.log')
		elif not i.verb: #user not ask ver; print not verb
			i.write(output='toto.log')
elif category=='hardware':
	os=general_info()
	for i in hardware:
		if verbosity: #user asks verb; print all
			i.write(output='toto.log')
		elif not i.verb: #user not ask ver; print not verb
			i.write(output='toto.log')
elif category=='display':
	os=general_info()
	for i in display:
		if verbosity: #user asks verb; print all
			i.write(output='toto.log')
		elif not i.verb: #user not ask ver; print not verb
			i.write(output='toto.log')
elif category=='sound':
	os=general_info()
	for i in sound:
		if verbosity: #user asks verb; print all
			i.write(output='toto.log')
		elif not i.verb: #user not ask ver; print not verb
			i.write(output='toto.log')
elif category=='bootloader':
	os=general_info()
	for i in bootloader:
		if verbosity: #user asks verb; print all
			i.write(output='toto.log')
		elif not i.verb: #user not ask ver; print not verb
			i.write(output='toto.log')
elif category=='internet':
	os=general_info()
	for i in internet:
		if verbosity: #user asks verb; print all
			i.write(output='toto.log')
		elif not i.verb: #user not ask ver; print not verb
			i.write(output='toto.log')
else:
	print('Wrong category')
	usage()
	list()
	sys.exit()




